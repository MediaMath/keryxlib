package wal

// Copyright 2015 MediaMath <http://www.mediamath.com>.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

import "testing"

func TestHeapDataExpectations(t *testing.T) {
	for _, exp := range heapDataExpectations {
		if act := NewHeapData(exp.typ, false, exp.bs); act[0].String() != exp.str {
			t.Errorf("expected %q but got %q", exp.str, act[0].String())
		}
	}
}

var heapDataExpectations = []heapDataExpectation{
	{Insert, "Insert in 1663/16384/16387 to (2034,27)",
		[]byte{
			0x7f, 0x06, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0xf2, 0x07,
			0x1b, 0x00, 0xbf, 0x5f, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	{Insert, "Insert in 1663/16384/16387 to (2034,28)",
		[]byte{
			0x7f, 0x06, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0xf2, 0x07,
			0x1c, 0x00, 0xbf, 0x5f, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	{Insert, "Insert in 1663/16384/16387 to (2034,29)",
		[]byte{
			0x7f, 0x06, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0xf2, 0x07,
			0x1d, 0x00, 0xbf, 0x5f, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	{Insert, "Insert in 1663/16384/16387 to (2034,30)",
		[]byte{
			0x7f, 0x06, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0xf2, 0x07,
			0x1e, 0x00, 0xbf, 0x5f, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	{Update, "Update in 1663/16384/16387 from (1282,95) to (1284,56)",
		[]byte{
			0x7f, 0x06, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05,
			0x5f, 0x00, 0x10, 0x04, 0x00, 0x00, 0x04, 0x05, 0x38, 0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 0x28}},
	{Update, "Update in 1663/16384/16387 from (1282,96) to (1284,57)",
		[]byte{
			0x7f, 0x06, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05,
			0x60, 0x00, 0x10, 0x04, 0x00, 0x00, 0x04, 0x05, 0x39, 0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 0x28}},
	{Update, "Update in 1663/16384/16387 from (1282,97) to (1284,58)",
		[]byte{
			0x7f, 0x06, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05,
			0x61, 0x00, 0x10, 0x04, 0x00, 0x00, 0x04, 0x05, 0x3a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 0x28}},
	{Update, "Update in 1663/16384/16387 from (1282,98) to (1284,59)",
		[]byte{
			0x7f, 0x06, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05,
			0x62, 0x00, 0x10, 0x04, 0x00, 0x00, 0x04, 0x05, 0x3b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 0x28}},
	{Delete, "Delete in 1663/16395/16398 from (2500,112)",
		[]byte{
			0x7f, 0x06, 0x00, 0x00, 0x0b, 0x40, 0x00, 0x00, 0x0e, 0x40, 0x00, 0x00, 0x00, 0x00, 0xc4, 0x09,
			0x70, 0x00, 0x82, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	{Delete, "Delete in 1663/16395/16398 from (2500,113)",
		[]byte{
			0x7f, 0x06, 0x00, 0x00, 0x0b, 0x40, 0x00, 0x00, 0x0e, 0x40, 0x00, 0x00, 0x00, 0x00, 0xc4, 0x09,
			0x71, 0x00, 0x82, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	{Delete, "Delete in 1663/16395/16398 from (2500,114)",
		[]byte{
			0x7f, 0x06, 0x00, 0x00, 0x0b, 0x40, 0x00, 0x00, 0x0e, 0x40, 0x00, 0x00, 0x00, 0x00, 0xc4, 0x09,
			0x72, 0x00, 0x82, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	{Delete, "Delete in 1663/16395/16398 from (2500,115)",
		[]byte{
			0x7f, 0x06, 0x00, 0x00, 0x0b, 0x40, 0x00, 0x00, 0x0e, 0x40, 0x00, 0x00, 0x00, 0x00, 0xc4, 0x09,
			0x73, 0x00, 0x82, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
}

type heapDataExpectation struct {
	typ RecordType
	str string
	bs  []byte
}
