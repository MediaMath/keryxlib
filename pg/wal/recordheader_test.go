package wal

import "testing"

func TestRecordHeaderExpectations(t *testing.T) {
	readFrom := NewLocationWithDefaults(0)
	for _, exp := range recordHeaderExpectations {
		act := RecordHeader{readFrom, exp.bs}
		failIfRecordHeaderNotMatching(t, exp, act)
	}
}

/*
selected xlog dump output:

[cur:0/38CEC90, xid:1998, rmid:10(Heap), len:64/96, prev:0/38CEC48] insert: s/d/r:1663/16384/16387 blk/off:2034/27 header: t_infomask2 3 t_infomask 2050 t_hoff 24
[cur:0/38CECF0, xid:1998, rmid:11(Btree), len:34/66, prev:0/38CEC90] insert_leaf: s/d/r:1663/16384/16391 tid 548/123
[cur:0/38CED38, xid:1998, rmid:10(Heap), len:64/96, prev:0/38CECF0] insert: s/d/r:1663/16384/16387 blk/off:2034/28 header: t_infomask2 3 t_infomask 2050 t_hoff 24
[cur:0/38CED98, xid:1998, rmid:11(Btree), len:34/66, prev:0/38CED38] insert_leaf: s/d/r:1663/16384/16391 tid 548/124
[cur:0/38CEDE0, xid:1998, rmid:15(Sequence), len:158/190, prev:0/38CED98] seq
[cur:0/38CEEA0, xid:1998, rmid:10(Heap), len:64/96, prev:0/38CEDE0] insert: s/d/r:1663/16384/16387 blk/off:2034/29 header: t_infomask2 3 t_infomask 2050 t_hoff 24
[cur:0/38CEF00, xid:1998, rmid:11(Btree), len:34/66, prev:0/38CEEA0] insert_leaf: s/d/r:1663/16384/16391 tid 548/125
[cur:0/38CEF48, xid:1998, rmid:10(Heap), len:64/96, prev:0/38CEF00] insert: s/d/r:1663/16384/16387 blk/off:2034/30 header: t_infomask2 3 t_infomask 2050 t_hoff 24
[cur:0/38CEFA8, xid:1998, rmid:11(Btree), len:34/66, prev:0/38CEF48] insert_leaf: s/d/r:1663/16384/16391 tid 548/126
[cur:0/38CEFF0, xid:1998, rmid:1(Transaction), len:32/64, prev:0/38CEFA8] d/s:16384/1663 commit at 2015-05-16 20:55:54 CDT
[cur:0/38CF030, xid:0, rmid:0(XLOG), len:56/88, prev:0/38CEFF0] checkpoint: redo 0/038CF030; tli 1; nextxid 1999;  nextoid 16393; nextmulti 1; nextoffset 0; shutdown at 2015-05-16 20:55:54 CDT
[cur:0/38CF088, xid:1999, rmid:10(Heap), len:21/5721, prev:0/38CF030] insert: s/d/r:1663/16384/11918 blk/off:13/23 header: none
[cur:0/38CF088, xid:1999, rmid:10(Heap), len:21/5721, prev:0/38CF030] bkpblock[1]: s/d/r:1663/16384/11918 blk:13 hole_off/len:116/2548
[cur:0/38D06F8, xid:1999, rmid:11(Btree), len:18/234, prev:0/38CF088] insert_leaf: s/d/r:1663/16384/11923 tid 2/6
[cur:0/38D06F8, xid:1999, rmid:11(Btree), len:18/234, prev:0/38CF088] bkpblock[1]: s/d/r:1663/16384/11923 blk:2 hole_off/len:48/8032
[cur:0/38D07E8, xid:1999, rmid:10(Heap), len:154/186, prev:0/38D06F8] insert: s/d/r:1663/16384/11918 blk/off:13/24 header: t_infomask2 22 t_infomask 2051 t_hoff 32
[cur:0/38D08A8, xid:1999, rmid:11(Btree), len:34/66, prev:0/38D07E8] insert_leaf: s/d/r:1663/16384/11923 tid 2/7
[cur:0/38D08F0, xid:1999, rmid:10(Heap), len:182/214, prev:0/38D08A8] insert: s/d/r:1663/16384/11918 blk/off:13/25 header: t_infomask2 22 t_infomask 2051 t_hoff 32
[cur:0/38D09C8, xid:1999, rmid:11(Btree), len:34/66, prev:0/38D08F0] insert_leaf: s/d/r:1663/16384/11923 tid 2/8
[cur:0/38D0A10, xid:1999, rmid:10(Heap), len:18/8094, prev:0/38D09C8] inplace: s/d/r:1663/16384/11947 block 5 off 14
[cur:0/38D0A10, xid:1999, rmid:10(Heap), len:18/8094, prev:0/38D09C8] bkpblock[1]: s/d/r:1663/16384/11947 blk:5 hole_off/len:260/172
[cur:0/38D29C8, xid:1999, rmid:10(Heap), len:146/178, prev:0/38D0A10] inplace: s/d/r:1663/16384/11947 block 5 off 22
[cur:0/38D2A80, xid:1999, rmid:1(Transaction), len:32/64, prev:0/38D29C8] d/s:16384/1663 commit at 2015-05-20 19:15:43 CDT
[cur:0/38D2AC0, xid:0, rmid:0(XLOG), len:56/88, prev:0/38D2A80] checkpoint: redo 0/038D2AC0; tli 1; nextxid 2000;  nextoid 16393; nextmulti 1; nextoffset 0; online at 2015-05-20 19:20:10 CDT
*/

var recordHeaderExpectations = []recordHeaderExpectation{
	{0xcc96e6f4, NewLocationWithDefaults(0x038cec48), 1998, 96, 64, 0x00, 0x0a, 1, []byte{0xf4, 0xe6, 0x96, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x48, 0xec, 0x8c, 0x03, 0xce, 0x07, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x0a}},
	{0xe0e7c392, NewLocationWithDefaults(0x038cec90), 1998, 66, 34, 0x00, 0x0b, 0, []byte{0x92, 0xc3, 0xe7, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x90, 0xec, 0x8c, 0x03, 0xce, 0x07, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x0b}},
	{0xef8f1cb3, NewLocationWithDefaults(0x038cecf0), 1998, 96, 64, 0x00, 0x0a, 1, []byte{0xb3, 0x1c, 0x8f, 0xef, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xec, 0x8c, 0x03, 0xce, 0x07, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x0a}},
	{0x5c379c14, NewLocationWithDefaults(0x038ced38), 1998, 66, 34, 0x00, 0x0b, 0, []byte{0x14, 0x9c, 0x37, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x38, 0xed, 0x8c, 0x03, 0xce, 0x07, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x0b}},
	{0x0ed5e197, NewLocationWithDefaults(0x038ced98), 1998, 190, 158, 0x00, 0x0f, 0, []byte{0x97, 0xe1, 0xd5, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x98, 0xed, 0x8c, 0x03, 0xce, 0x07, 0x00, 0x00, 0xbe, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x0f}},
	{0xaefc4f51, NewLocationWithDefaults(0x038cede0), 1998, 96, 64, 0x00, 0x0a, 1, []byte{0x51, 0x4f, 0xfc, 0xae, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xed, 0x8c, 0x03, 0xce, 0x07, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x0a}},
	{0x1943987d, NewLocationWithDefaults(0x038ceea0), 1998, 66, 34, 0x00, 0x0b, 0, []byte{0x7d, 0x98, 0x43, 0x19, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xee, 0x8c, 0x03, 0xce, 0x07, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x0b}},
	{0xcdd323ca, NewLocationWithDefaults(0x038cef00), 1998, 96, 64, 0x00, 0x0a, 1, []byte{0xca, 0x23, 0xd3, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0x8c, 0x03, 0xce, 0x07, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x0a}},
	{0xd8275df7, NewLocationWithDefaults(0x038cef48), 1998, 66, 34, 0x00, 0x0b, 0, []byte{0xf7, 0x5d, 0x27, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x48, 0xef, 0x8c, 0x03, 0xce, 0x07, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x0b}},
	{0x347dcac4, NewLocationWithDefaults(0x038cefa8), 1998, 64, 32, 0x00, 0x01, 4, []byte{0xc4, 0xca, 0x7d, 0x34, 0x00, 0x00, 0x00, 0x00, 0xa8, 0xef, 0x8c, 0x03, 0xce, 0x07, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x01}},
	{0x088f8a57, NewLocationWithDefaults(0x038ceff0), 0, 88, 56, 0x00, 0x00, 0, []byte{0x57, 0x8a, 0x8f, 0x08, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xef, 0x8c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00}},
	{0xa50c5047, NewLocationWithDefaults(0x038cf030), 1999, 5721, 21, 0x09, 0x0a, 1, []byte{0x47, 0x50, 0x0c, 0xa5, 0x00, 0x00, 0x00, 0x00, 0x30, 0xf0, 0x8c, 0x03, 0xcf, 0x07, 0x00, 0x00, 0x59, 0x16, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x09, 0x0a}},
	{0x02623978, NewLocationWithDefaults(0x038cf088), 1999, 234, 18, 0x09, 0x0b, 0, []byte{0x78, 0x39, 0x62, 0x02, 0x00, 0x00, 0x00, 0x00, 0x88, 0xf0, 0x8c, 0x03, 0xcf, 0x07, 0x00, 0x00, 0xea, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x09, 0x0b}},
	{0xaa8a7930, NewLocationWithDefaults(0x038d06f8), 1999, 186, 154, 0x00, 0x0a, 1, []byte{0x30, 0x79, 0x8a, 0xaa, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x06, 0x8d, 0x03, 0xcf, 0x07, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x00, 0x0a}},
	{0x82c219e9, NewLocationWithDefaults(0x038d07e8), 1999, 66, 34, 0x00, 0x0b, 0, []byte{0xe9, 0x19, 0xc2, 0x82, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x07, 0x8d, 0x03, 0xcf, 0x07, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x0b}},
	{0x7c04db31, NewLocationWithDefaults(0x038d08a8), 1999, 214, 182, 0x00, 0x0a, 1, []byte{0x31, 0xdb, 0x04, 0x7c, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x08, 0x8d, 0x03, 0xcf, 0x07, 0x00, 0x00, 0xd6, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x0a}},
	{0x9c7fb0ce, NewLocationWithDefaults(0x038d08f0), 1999, 66, 34, 0x00, 0x0b, 0, []byte{0xce, 0xb0, 0x7f, 0x9c, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x08, 0x8d, 0x03, 0xcf, 0x07, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x0b}},
	{0x3fbf0c2b, NewLocationWithDefaults(0x038d09c8), 1999, 8094, 18, 0x79, 0x0a, 0, []byte{0x2b, 0x0c, 0xbf, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x09, 0x8d, 0x03, 0xcf, 0x07, 0x00, 0x00, 0x9e, 0x1f, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x79, 0x0a}},
	{0x4aa0c876, NewLocationWithDefaults(0x038d0a10), 1999, 178, 146, 0x70, 0x0a, 0, []byte{0x76, 0xc8, 0xa0, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x8d, 0x03, 0xcf, 0x07, 0x00, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x70, 0x0a}},
	{0x7091645d, NewLocationWithDefaults(0x038d29c8), 1999, 64, 32, 0x00, 0x01, 4, []byte{0x5d, 0x64, 0x91, 0x70, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x29, 0x8d, 0x03, 0xcf, 0x07, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x01}},
	{0x503680e0, NewLocationWithDefaults(0x038d2a80), 0, 88, 56, 0x10, 0x00, 0, []byte{0xe0, 0x80, 0x36, 0x50, 0x00, 0x00, 0x00, 0x00, 0x80, 0x2a, 0x8d, 0x03, 0x00, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x10, 0x00}},
}

type recordHeaderExpectation struct {
	crc                                uint32
	previous                           Location
	transactionID, totalLength, length uint32
	info, resourceManagerID            uint8
	typ                                RecordType
	bs                                 []byte
}

func failIfRecordHeaderNotMatching(t *testing.T, exp recordHeaderExpectation, act RecordHeader) {
	if exp.crc != act.Crc() {
		t.Errorf("expected %.8x but got %.8x for crc", exp.crc, act.Crc())
	}
	if exp.previous.offset != act.Previous().offset {
		t.Errorf("(%.8x) expected %.8x but got %.8x for previous", exp.crc, exp.previous.offset, act.Previous().offset)
	}
	if exp.transactionID != act.TransactionID() {
		t.Errorf("(%.8x) expected %v but got %v for transaction id", exp.crc, exp.transactionID, act.TransactionID())
	}
	if exp.totalLength != act.TotalLength() {
		t.Errorf("(%.8x) expected %v but got %v for total length", exp.crc, exp.totalLength, act.TotalLength())
	}
	if exp.length != act.Length() {
		t.Errorf("(%.8x) expected %v but got %v for length", exp.crc, exp.length, act.Length())
	}
	if exp.info != act.Info() {
		t.Errorf("(%.8x) expected %.2x but got %.2x for info", exp.crc, exp.info, act.Info())
	}
	if exp.resourceManagerID != act.ResourceManagerID() {
		t.Errorf("(%.8x) expected %.2x but got %.2x for resource manager id", exp.crc, exp.resourceManagerID, act.ResourceManagerID())
	}
	if exp.typ != act.Type() {
		t.Errorf("(%.8x) expected %v but got %v for type", exp.crc, exp.typ, act.Type())
	}
}
